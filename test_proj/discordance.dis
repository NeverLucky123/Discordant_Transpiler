#include <iostream>
#include "a1.h"
using namespace std;
//dynamic function
@ return_any(@ any):
  return any;

//Functions can be declared with python syntax
int main():

    //as can classes
    class apple:
        string color="green";
        //variables declared as type @ can take on any primitive value, including std::string
        @ weight="2kg";

        apple():
            weight=2;
            weight=2.0+weight;
            //use if just like a normal variable
            cout<<weight;

    //easy declaration of vectors
    std::string desserts[?];
    desserts={"apple pie", "chocolate cake", "waffles", "cupcakes"};
    std::string colors[5?];
    colors={"green", "blue", "magenta", "teal", "crimson"};
    colors=desserts;
    double calorie_count[?]={100, 350, 70, 50};
    int precise_count[?]=calorie_count;

    int numbers[10?][?]={     //[num?] will declare a vector, [?] a deque
    {1,2,3,4,5,6,7,8,9,10},
    {-1,-2,-3,-4,-5,-6,-7,-8,-9,-10}
    };

    //python-style for statements
    for row in numbers:
        for int column in row:
            cout<<column<<endl;

    //arrays of unlike things
    @ bucket[?]={2.0, "chocolate milk", "15789"};

    if bucket[0]==2.0:
        cout<<bucket[0]<<endl;
    else if bucket[1]=="chocolate milk":
        cout<<bucket[1]<<endl;
    else:
        cout<<bucket[2]<<endl;
    while true:
        cout<<"True"<<endl;

    for &item in bucket:
        static int i;
        i++;
        cout<<item<<endl;

    //array slicing
    auto small_bucket=bucket[1:2];
    for item in small_bucket:
        cout<<item<<endl;

    //dynamic functions
    cout<<return_any(2.0)<<endl;
    cout<<return_any(5)<<endl;
    cout<<return_any("hello")<<endl;

    a2();

    return 0;
